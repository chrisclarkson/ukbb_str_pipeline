#!/bin/bash
# ehv5 app
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {
    dx download "$reference" -o reference 
    dx download "$variant_catalog" -o variant_catalog 
    length=${#reads[@]} # number of samples in batch
    for i in $(seq 0 $(($length - 1)))
    do
        readspath=${reads[$i]} 
        prefix=${output_prefix[$i]}
        echo "Processing Cram file: '$readspath'"
        dx download "$readspath" -o mapped_reads #download the cram file for sample
        dx download "${readspath}".crai -o mapped_reads.crai # index must also be downloaded to the instance
        # run expansion hunter v5.0.0 (executable located in resources/usr/bin)
        ExpansionHunter \
        --reads mapped_reads --reference reference --variant-catalog variant_catalog --output-prefix $prefix \
        --sex $sex --analysis-mode "streaming" -n 4
        rm mapped_reads*
        # sambamba sort -o "$prefix"_sorted.bam "$prefix"_realigned.bam # sort the realigned bamfile
        # sambamba index "$prefix"_sorted.bam
        # bgzip -c "$prefix".vcf > "$prefix".temp.vcf.gz # compress vcf
        # echo $prefix > sample.id
        # bcftools reheader -s sample.id "$prefix".temp.vcf.gz -o "$prefix".vcf.gz #reheader sample with EID
        # bcftools index -t "$prefix".vcf.gz

        # The following line(s) use the dx command-line tool to upload your file
        # outputs after you have created them on the local file system.  Run "dx upload -h"
        # to see more options to set metadata.

        json=$(dx upload "$prefix".json --brief --path "$output_folder"/"$prefix".json -p)
        vcf=$(dx upload "$prefix".vcf --brief --path "$output_folder"/"$prefix".vcf -p)
        bam=$(dx upload "$prefix"_realigned.bam --brief --path "$output_folder"/"$prefix"_realigned.bam -p)
        # index_bam=$(dx upload "$prefix"_sorted.bam.bai --brief --path "$output_folder"/"$prefix"_sorted.bam.bai -p)
        # index_vcf=$(dx upload "$prefix".vcf.gz.tbi --brief --path "$output_folder"/"$prefix".vcf.gz.tbi -p)

        # The following line(s) use the utility dx-jobutil-add-output to format and
        # add output variables to your job's output as appropriate for the output
        # class.  Run "dx-jobutil-add-output -h" for more information on what it
        # does.

        dx-jobutil-add-output json "$json" --array
        dx-jobutil-add-output vcf "$vcf" --array
        dx-jobutil-add-output bam "$bam" --array
        # dx-jobutil-add-output index_bam "$index_bam" --array
        # dx-jobutil-add-output index_vcf "$index_vcf" --array
        rm "$prefix"*
    done
}
