#!/bin/bash
# test_app 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {
set -e -x
    echo "Value of folder: '$folder'"
    # pip3 install PyVCF
    # dx download `"$folder"/*bam`
    # ls *bam > test_bams
    # awk '{print "WGS\ 500k\ release:/cc_analysis/output_dir/EHv5/24/"$0}' test_bams2
    mkdir mount_here
    if [ $mount_project = "500k" ]
        then
        dxfuse mount_here WGS\ 500k\ release
    else
        dxfuse mount_here "$mount_project"
    fi
    ls mount_here
    ls mount_here/*"$folder"/*bam >test_bams
    python3 /usr/bin/find_regex_genotypes_parallel_vcf.py --span 0-4 --bam_files test_bams --output "$output_name" --vcf_informed True
    python3 /usr/bin/find_regex_genotypes_parallel_vcf.py --span 1-4 --count CAA CAACAG "(CAACAG)x2" CCGCCA CCG --bam_files test_bams --output "1-4_${output_name}"
    cat $output_name
    output=$(dx upload "$output_name" --brief --path "output_dir/RC/${output_name}" -p)
    dx-jobutil-add-output output "$output" --class=file
    output2=$(dx upload "1-4_${output_name}" --brief --path "output_dir/RC/1-4_${output_name}" -p)
    dx-jobutil-add-output output2 "$output2" --class=file
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    # dx-jobutil-add-output output "$output" --class=string
}
